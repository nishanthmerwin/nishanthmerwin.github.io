<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://www.merwin.ca/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.merwin.ca/" rel="alternate" type="text/html" /><updated>2024-07-04T15:29:48-04:00</updated><id>https://www.merwin.ca/feed.xml</id><title type="html">Nishanth Merwin</title><subtitle>A blog about technology and stuff related</subtitle><entry><title type="html">Connecting LLMs to chemoinformatics</title><link href="https://www.merwin.ca/rag-chemoinformatics/" rel="alternate" type="text/html" title="Connecting LLMs to chemoinformatics" /><published>2024-07-02T11:42:00-04:00</published><updated>2024-07-02T11:42:00-04:00</updated><id>https://www.merwin.ca/rag-chemoinformatics</id><content type="html" xml:base="https://www.merwin.ca/rag-chemoinformatics/">&lt;p&gt;In this article, expect to see a mix of my personal insights, high level overviews and a few technical deep-dives into
LLMs and chemoinformatics.&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;Over the past 8ish years, I’ve been working professionally across various aspects of drug discovery. Early on in my career, I focussed a lot on applying chemoinformatics techniques to make natural product discovery more effective. In my current role, we’re developing strategies to make data more discoverable and accessible using LLMs within clinical trial operations. As I started to dig into one of the more common techniques for this, retrieval augmented generation (RAG), I began to see a ton of similarities to how we used to search for chemical structures.&lt;/p&gt;

&lt;p&gt;Both of these techniques rely on the core concept of vectorizing a complex input, storing this information in a specialized database and then doing simple distance measurements. These are demonstrated in the workflow images depicted below.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/tanimoto_rag-tanimoto.drawio.png&quot; title=&quot;RAG Charts&quot; /&gt;
  &lt;figcaption&gt;A high level overview of Tanimoto based chemical similarity searches.&lt;/figcaption&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/tanimoto_rag-llms.drawio.png&quot; title=&quot;RAG Charts&quot; /&gt;
  &lt;figcaption&gt;A typical RAG based workflow for document retrieval and question-answering agents.&lt;/figcaption&gt;
&lt;/p&gt;

&lt;h2 id=&quot;similarities-between-the-two-workflows&quot;&gt;Similarities between the two workflows&lt;/h2&gt;

&lt;p&gt;At a high level, there are several thematic similarities between the two workflows. First, an embedding model (or algorithm) is used
to ingest a complex input and translate it into a simplified representation that can then be indexed. Second, a similarity search
is conducted using a relatively simple distance measure. These distance measures can be performed using highly optimized vector databases.&lt;/p&gt;

&lt;p&gt;In both workflows, an indexing and querying pipeline is required to ingest and index data into a database prior to individual user
queries.&lt;/p&gt;

&lt;h2 id=&quot;differences&quot;&gt;Differences&lt;/h2&gt;

&lt;h3 id=&quot;chemicals-vs-unstructured-text&quot;&gt;Chemicals vs unstructured text&lt;/h3&gt;

&lt;p&gt;Abstract unstructured text is far more complex and unpredictable
than the typical kinds of organic chemical structures that are usually queried in drug discovery.&lt;/p&gt;

&lt;p&gt;Chemical structures are often stored in a text-based format called SMILES. Over the past decade, there has been significant
research on leveraging advances in language models to ingest and generate novel
chemical entities, known as generative chemistry. Unlike unstructured text that may provide narrative stories over long
context windows, chemical structures have a fixed length with the majority of drug-like molecules containing fewer than 1,000 tokens.
Drug like molecules also only have a small number of letters (atoms) have to follow a set of chemical rules
 (e.g. max number of bonds per atom) that limit the overall complexity of the data structure.&lt;/p&gt;

&lt;p&gt;Working with simpler data structures meant that we were able to use simpler encoding methods (see more below).&lt;/p&gt;

&lt;h3 id=&quot;embedding-models-vs-hashing-algorithms&quot;&gt;Embedding models vs hashing algorithms&lt;/h3&gt;

&lt;p&gt;Embedding models for text are trained on large amounts of text data to better group text-based concepts. In the past, strategies
like word2vec were used to convert words into vectors that retained some degree of sematic understanding. 
Today, embedding models are much more sophisticated than this and can relate abstract concepts not only across words but across varying lengths
of multi-lingual text.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/3f/Word_vector_illustration.jpg&quot; title=&quot;word2vec semantic relationships&quot; /&gt;
  &lt;figcaption&gt;Word2Vec blew my mind when I saw this in the mid-2010s.&lt;/figcaption&gt;
&lt;/p&gt;

&lt;p&gt;In the chemistry side, the most popular embedding strategy was something called the circular fingerprint. Here, individual atoms were
profiled according to their surrounding environment to generate a unique hash. This hash was then converted to a number between 0-1023 using a bloom
filter to generate a fixed-length binary vector.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://docs.chemaxon.com/display/docs/images/download/attachments/1806333/ecfp_iterations.png&quot; title=&quot;word2vec semantic relationships&quot; /&gt;
  &lt;figcaption&gt;Word2Vec blew my mind when I saw this in mid-2010s.&lt;/figcaption&gt;
&lt;/p&gt;

&lt;p&gt;This is not a perfect difference, simpler strategies (like word2vec) were used in NLP while more 
&lt;a href=&quot;https://pubs.acs.org/doi/10.1021/acs.jcim.7b00616&quot;&gt;complex ML based systems&lt;/a&gt; have been 
employed and are continuously being iterated upon in the chemoinformatics domain.&lt;/p&gt;

&lt;h3 id=&quot;vector-databases&quot;&gt;Vector databases&lt;/h3&gt;

&lt;p&gt;At the time, for most of my research career, chemical similarity searches were done in a Python script where
I performed a nested for-loop to compare my set of query molecules to everything in our database. However, when
building more end-user focussed systems, I have used the 
&lt;a href=&quot;https://www.rdkit.org/docs/Cartridge.html&quot;&gt;RDKit Postgres cartridge&lt;/a&gt;
to simplify molecule indexing and
similarity searches.&lt;/p&gt;

&lt;p&gt;Today however, there are so many vector databases to choose from that support vector indexing and distance based queries out of the box.
Tools like ChromaDB as well as extensions for common databases like Elasticsearch and Postgres allow for RAG-based
agents to be built very easily as extensions on top of existing databases. The open-source community and
tools for LLMs are much more developed (not surprising given the recent LLM hype), but this could definitely help
if I try my hand out at some chemoinformatics again soon!&lt;/p&gt;

&lt;p&gt;One of the biggest challenges for building chemical databases wasn’t necessarily the chemical structures themselves but
handling all of the unstructured metadata that accompanied each entity. It almost makes me wonder if we could build a better
chemical database using LLMs to embed and contextualize molecular properties currently stored in text form.&lt;/p&gt;

&lt;p&gt;If you like more content like this, let me know! Reach out on &lt;a href=&quot;https://www.linkedin.com/in/nmerwin/&quot;&gt;LinkedIn&lt;/a&gt; or leave a comment below.&lt;/p&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="chemooinformatics" /><category term="LLMs" /><category term="data science" /><summary type="html">In this article, expect to see a mix of my personal insights, high level overviews and a few technical deep-dives into LLMs and chemoinformatics.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.merwin.ca/assets/images/markdown.jpg" /><media:content medium="image" url="https://www.merwin.ca/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Swinging with trigonometry</title><link href="https://www.merwin.ca/pendulum_game/" rel="alternate" type="text/html" title="Swinging with trigonometry" /><published>2020-01-18T11:42:00-05:00</published><updated>2020-01-18T11:42:00-05:00</updated><id>https://www.merwin.ca/pendulum_game</id><content type="html" xml:base="https://www.merwin.ca/pendulum_game/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As a result of commuting, I’ve found myself back playing mobile phone and web games on the train.
It’s a nice pass time, but I recently came around a game that although seems remarkably simple, it’s actually
a ton of fun to play (plus it gets really challenging).
&lt;a href=&quot;https://www.newgrounds.com/portal/view/724232&quot;&gt;Handulum +&lt;/a&gt; is a physics based game where you can
“catch” a falling ball and swing it along a pendulum. I got decently far, but wanted to see what it 
would take to actually recreate this sort of physics engine. I’m not really a game developer, but
I’ve been really interested in developing more low level graphics for creative side projects and
though this would be a good place to start. Check out Handulum + below though, its miles beyond
anything I could create!&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
    &lt;video height=&quot;300&quot; width=&quot;500&quot; autoplay=&quot;&quot; loop=&quot;&quot;&gt;
        &lt;source src=&quot;https://video.twimg.com/tweet_video/EOkWxJhWoAYWYPH.mp4&quot; type=&quot;video/mp4&quot; /&gt;
        &amp;lt;/source&amp;gt;
    &lt;/video&gt;
&lt;/figure&gt;

&lt;p&gt;The first thing I did was choose my ecosystem. Since my day job mostly revolves around Python,
I quickly found myself reading into &lt;a href=&quot;https://www.pygame.org/wiki/GettingStarted&quot;&gt; PyGame&lt;/a&gt;.
The syntax was brief enough and it could draw circles and lines, which was more than enough on the graphics
side for me. My main goal here was to recreate the physics involved, not spend too much time
trying to make it pretty (although that might be a fun extension to this project). A few 
&lt;a href=&quot;http://www.petercollingridge.co.uk/tutorials/pygame-physics-simulation/&quot;&gt;tutorials&lt;/a&gt;
later, I now had a bouncing ball that somewhat emulated gravity.&lt;/p&gt;

&lt;p&gt;But this game obviously required a bit more than bouncing. I needed to figure out how to
get the ball to move in circle, and even more, observe some conservation of momentum
as it attached and released from the pendulum. This was certainly more challenging
than I had initially thought, and quickly found myself lost in Google searches and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Pendulum_(mathematics)#Simple_gravity_pendulum&quot;&gt;endless equations&lt;/a&gt;
describing motion in “simple” pendulums (not so simple for me!).&lt;/p&gt;

&lt;p&gt;When I first started, I simply tried to do everything via code, but I quickly found the ball
moving in all sorts of crazy ways, and not getting and progress.
In the end, I found it best to just draw it out, and pull out some handy-dandy trigonometry.
What’s not shown below are the 10+ other pages of scribbles that I threw away along the process.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/pendulum/trig.jpg&quot; title=&quot;Does this resemble trigonomotry?&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;I realized  were two key aspects that I had to consider:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Converting forces in x and y directions to an angular direction via trigonometry (thanks
  to SOH-CAH-TOA).&lt;/li&gt;
  &lt;li&gt;Understanding that angular velocity can be represented as linear velocity (in x and y
  direction) via the angle of the tangent, which luckily enough is also calculable
  via trigonometric equations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, this took me quite a bit longer than I expected, but I did end up learning a lot
and brushing up on some mathematics that I had long forgotten. Doing this in Python made
this project a lot easier as I was very comfortable code organization and structuring
everything in an object oriented manner. Take a look at the prototype below:&lt;/p&gt;

&lt;div style=&quot;position:relative; padding-bottom:calc(78.50% + 44px)&quot;&gt;&lt;iframe src=&quot;https://gfycat.com/ifr/FlamboyantColossalIndianglassfish&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;100%&quot; height=&quot;100%&quot; style=&quot;position:absolute;top:0;left:0;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;If you’re even more curious, feel free to fork the repo and try running it yourself.
Let me know what you think.&lt;/p&gt;

&lt;p&gt;Repo: &lt;a href=&quot;https://github.com/nishanthmerwin/handball&quot;&gt;HandBall&lt;/a&gt;&lt;/p&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="game development" /><category term="math" /><category term="pygame" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.merwin.ca/assets/images/markdown.jpg" /><media:content medium="image" url="https://www.merwin.ca/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Making sense of XKCD</title><link href="https://www.merwin.ca/xkcd_writeup/" rel="alternate" type="text/html" title="Making sense of XKCD" /><published>2019-01-28T11:42:00-05:00</published><updated>2019-01-28T11:42:00-05:00</updated><id>https://www.merwin.ca/xkcd_writeup</id><content type="html" xml:base="https://www.merwin.ca/xkcd_writeup/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Who doesn’t love &lt;a href=&quot;https://xkcd.com/&quot;&gt;XKCD&lt;/a&gt;? A while back, around the start of my grad school, I came across a relevant machine learning comic from Randall (see below). Today, we’re going to throw some NLP and topic modeling into a pile and hope something fun comes out the other end.&lt;/p&gt;

&lt;figure align=&quot;center&quot;&gt;
  &lt;img src=&quot;https://imgs.xkcd.com/comics/machine_learning.png&quot; title=&quot;The pile gets soaked with data and starts to get mushy over time, so it's technically recurrent.&quot; /&gt;
  &lt;figcaption&gt;Test caption.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;First things first, lets download some of these comics. Altogether, Randall Munroe (author of XKCD) has been extremely productive and has created over 2100 comics since the inception of XKCD on January 1st 2006! Looking at this, he is scarily consistent, averaging about 13 comics a month. The first month is an outlier, I imagine he had a butt load of comics he had drawn and released them all onto the internet at once. But I truly admire his consistency!&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/xkcd/productivity.png&quot; title=&quot;My attempt at recreating some XKCD-esque charts&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Next, lets gather some more data. Thankfully, the folks at &lt;a href=&quot;https://www.explainxkcd.com/wiki/index.php/Main_Page&quot;&gt;Explained XKCD&lt;/a&gt; have annotated each of these comics with a transcript as well as their own explanations for each. This, along with the actual images, meant I had a rich dataset to work with of roughly unstructured text and their corresponding comics.&lt;/p&gt;

&lt;h3 id=&quot;we-have-data-now-what&quot;&gt;We have data, now what?&lt;/h3&gt;

&lt;p&gt;The title of this section accurately describes how I felt at this stage in the project. With work, I usually have a goal or end project, but I wanted to use this dataset to learn some new skills. So, I thought to try a bit of topic modelling. I really like this technique because it essentially allows the data to “self-organize”! Basically, based on the co-occurance of specific words, we can identify several topics that are commonly used in XKCD comics. After surprisingly little actual coding, I was able to build a Latent Ditrecht Allocation (LDA) model that identified 10 topics of interest.&lt;/p&gt;

&lt;p&gt;Creating the model itself was pretty simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Lemmatizing all words identified in both transcript and explanations of the comic. Gensim / NLTK libraries helped out a lot here!&lt;/li&gt;
  &lt;li&gt;Create a dictionary, and remove all words that appear relatively infrequently.&lt;/li&gt;
  &lt;li&gt;Use gensim to build an LDA model across 10 topics, passing over the data 20 times.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And with that, we get the following topics revealed.&lt;/p&gt;

&lt;table class=&quot;mbtablestyle&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Topic Number&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Words&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;What I think it means?&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;megan, black, ponytail, friend, game, panel, year, beret, number, phone&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;People and timelines&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;stapl, momentum, len, megan, cat, repair, beret, ponytail, pointer, black&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;??&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cabl, jack, geek, ingredi, pump, verb, guest, sister, factori, weekend&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Cables?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;barrel, bowl, polar, weekend, screenshot,   float, dozen, flowchart, flash, sleep&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Barrels&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;gold, megan, michael, pool, sheet, love, backpack, feynman, peni, bird&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Gold?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;band, fluid, song, wikipedia, megan, bush, word, game, monster, music&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;??&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;elev, twitter, megan, reddit, cabl, friend, kernel, river, user, lake&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;??&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;skateboard, senat, steve, firefli, escal, summer, paul, democrat, republican, adam&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Politics&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;chess, pokemon, knight, hors, basketbal, sister, player, captur, piec, board&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Chess and pokemon&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;virus, backup, keyboard, chip, belt, dougla, drone, black, beret, ghost&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;??&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Looking through some of these, there were some that were surprisingly accurate. For example, barrels is a recurring theme in his works, and was deserving of a whole topic on its own. Other topics such as 2, 5, 6 and 9 were very rarely observed.&lt;/p&gt;

&lt;h3 id=&quot;lets-search-by-topic&quot;&gt;Lets search by topic!&lt;/h3&gt;

&lt;p&gt;From here, I started playing around to see how we could sort and search for these topics among all of these comics. In particular, I wanted to share this with all of you.
So, using the LDA model for each of these topics, I wanted to create a web app with SLIDERS! Realistically, you can use the sliders to identify
the mix of these topics you want, and with my website, I’ll identify the top five comics that match your search. Kinda like the DJ booth of XKCD comics!&lt;/p&gt;

&lt;p&gt;I built this pretty rapidly using Flask to act as the backend + server side rendering engine. Heroku allows you to deploy flask applications with ease, and for free so you can find it all on there.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://protected-mesa-78784.herokuapp.com/&quot;&gt;WebApp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nishanthmerwin/xkcd_lda_flaskapp&quot;&gt;WebApp Source code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nishanthmerwin/xkcd_lda&quot;&gt;GitHub code for this analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, I was pretty impressed with this dataset. In the end, I wanted to put something out before diving too much into the data science-y aspects of it, as I could have diven much deeper! For anyone curious, here are a few more ideas I had / might pursure with this dataset:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sentiment analysis (How positive / negative / angry do each of the comics read?)&lt;/li&gt;
  &lt;li&gt;Image analysis using deep learning
    &lt;ul&gt;
      &lt;li&gt;Can we cluster according to these topics that we identified?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How many topics is ideal? What words are most common?&lt;/li&gt;
  &lt;li&gt;With StyleGAN out there now, can we generate some of these drawings of Megan / beret man?&lt;/li&gt;
&lt;/ul&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="visualization" /><category term="data science" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.merwin.ca/assets/images/markdown.jpg" /><media:content medium="image" url="https://www.merwin.ca/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">#SWDChallenge Makeover</title><link href="https://www.merwin.ca/swd/" rel="alternate" type="text/html" title="#SWDChallenge Makeover" /><published>2018-09-05T11:42:00-04:00</published><updated>2018-09-05T11:42:00-04:00</updated><id>https://www.merwin.ca/swd</id><content type="html" xml:base="https://www.merwin.ca/swd/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I recently came across &lt;a href=&quot;http://www.storytellingwithdata.com/&quot;&gt;Storytelling With Data&lt;/a&gt;, and their #SWDChallenge. Sad that I missed their last round, I was quick to jump on this month’s &lt;a href=&quot;http://www.storytellingwithdata.com/blog/2018/8/24/swdchallenge-how-would-you-makeover-this-graph&quot;&gt;challenge&lt;/a&gt;. The challenge this month was to revamp this figure depicting the change in global travel markets from 2000 to 2016.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/makeover_challenge.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing I saw with this chart is the title, and I had absolutely no idea what APAC was. Only after playing with the data for a while, I realized that APAC=Asia Pacific, and that in 2016, this region has the largest share of the travel tourism market. While great to include a clear takeaway in a figure, it was lost in translation. Next, I realized that my eyes were constantly bouncing between the two pie charts, more so comparing the percentage values than the actual size of the pie (pie charts are &lt;a href=&quot;https://blog.funnel.io/why-we-dont-use-pie-charts-and-some-tips-on-better-data-visualizations&quot;&gt;notoriously&lt;/a&gt; &lt;a href=&quot;https://www.richardhollins.com/blog/why-pie-charts-suck/&quot;&gt;difficult&lt;/a&gt; to &lt;a href=&quot;http://www.storytellingwithdata.com/blog/2011/07/death-to-pie-charts&quot;&gt;interpret&lt;/a&gt;) So, moving forward, I knew I had to fix a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use consistent acronyms across the chart.&lt;/li&gt;
  &lt;li&gt;Provide a way for data to be directly compared, without the use of pie charts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With these two goals in mind, I created a new interpretation of this data set:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/makeover_challenge_revamped.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This plot was created with matplotlib, with slight modifications using inkscape (mainly for the legend). One aspect I wanted to highlight in this graph is the difference between 2000 and 2016, which is why I chose to emphasize this with arrows, coloured according to the direction. Only after I plotted this data, I could appreciate that Asia Pacific is not only the largest travel market, but also that all other regions have lost lots of this market share.&lt;/p&gt;

&lt;p&gt;All of the code needed to plot this is hosted on my &lt;a href=&quot;https://github.com/nishanthmerwin/swd_challenge/blob/master/src/plot_data.ipynb&quot;&gt;GitHub&lt;/a&gt;. Feel free to peruse and suggest any improvements!&lt;/p&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="visualization" /><category term="data science" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.merwin.ca/assets/images/markdown.jpg" /><media:content medium="image" url="https://www.merwin.ca/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building an object recognition mobile app</title><link href="https://www.merwin.ca/deltahacks/" rel="alternate" type="text/html" title="Building an object recognition mobile app" /><published>2018-01-29T11:42:00-05:00</published><updated>2018-01-29T11:42:00-05:00</updated><id>https://www.merwin.ca/deltahacks</id><content type="html" xml:base="https://www.merwin.ca/deltahacks/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This past weekend, I participated in &lt;a href=&quot;http://deltahacks.com/&quot;&gt;DeltaHacks IV&lt;/a&gt; at McMaster, and got a chance to meet, learn and collaborate with a lot of awesome people. Our team decided to tackle one of the challenges posted, to improve workplace safety. Our idea was to create an object recognition mobile application that employees could use to easily identify the dangers and safety protocols required to operate the equipment around them.&lt;/p&gt;

&lt;p&gt;Together with &lt;a href=&quot;https://github.com/RyanNourbaran&quot;&gt;Ryan&lt;/a&gt; and &lt;a href=&quot;https://github.com/Sujan-Kandeepan&quot;&gt;Sujan&lt;/a&gt;, we built SafetyFirst.&lt;/p&gt;

&lt;iframe src=&quot;https://gfycat.com/ifr/ThinFastDanishswedishfarmdog&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;720&quot; height=&quot;400&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;the-technology&quot;&gt;The technology&lt;/h2&gt;

&lt;p&gt;A lot of this app was made possible through the work done by Google’s research team. In 2017, their team released several &lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/object_detection&quot;&gt;object recognition models&lt;/a&gt; trained on the &lt;a href=&quot;http://cocodataset.org&quot;&gt;COCO&lt;/a&gt; dataset. While they all work well, we chose to use the “Single Shot Multibox Detector (SSD) with MobileNet” due to its rapid prediction time. After trying a few others, we found that this model could provide reliable results in seconds running on just a CPU.&lt;/p&gt;

&lt;p&gt;To use this model, we built a simple webserver using &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; to expose a single endpoint. This endpoint, when deployed receives images base64 encoded and embedded within a JSON object. At this point, the image is decoded in the backend and sent through the network for classification, and bounding box prediction. Using PIL, the bounding boxes of each prediction are drawn on the image before sending it back to the user, along with prediction data. To deploy this application, we used &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;. Although I had never used it before, it’s surprisingly simple to expose a Flask application through there.&lt;/p&gt;

&lt;p&gt;The front end of this application was built using &lt;a href=&quot;https://developer.android.com/studio/index.html&quot;&gt;Android Studio&lt;/a&gt;. This was entirely built by Sujan, and he did an amazing job. This app currently allows users to take pictures, send it to the webserver for prediction, and then display the results. For each of our predictions, Ryan setup a MongoDB document collection that was exposed through a RESTful API. MongoDB was another tool that I had just learned about, and was impressed with how easy and quick it was to setup.&lt;/p&gt;

&lt;p&gt;Feel free to poke around or fork our &lt;a href=&quot;https://github.com/nishanthmerwin/deltahacks4_arsafety&quot;&gt;git repo&lt;/a&gt;. Happy hacking!&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;A big thanks to DeltaHacks IV organizing committee, your hard work made all of this possible. Another thank you to AccelorMital Dofasco for awarding us with the Workplace Safety prize. And finally a thanks to all the judges that deemed us worthy as one of the top six finalists.&lt;/p&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="machine learning" /><category term="python" /><category term="tensorflow" /><category term="Android Studio" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.merwin.ca/assets/images/markdown.jpg" /><media:content medium="image" url="https://www.merwin.ca/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Hello and jless</title><link href="https://www.merwin.ca/first_post/" rel="alternate" type="text/html" title="Hello and jless" /><published>2017-11-24T11:42:00-05:00</published><updated>2017-11-24T11:42:00-05:00</updated><id>https://www.merwin.ca/first_post</id><content type="html" xml:base="https://www.merwin.ca/first_post/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hi all! Welcome to my blog. As you might already know, 
I’m currently heading towards the end of my graduate career and thought 
about all of the things I’ve learned through my time here. To keep some record 
of it and share a few of my experiences, I’m publishing some tidbits of knowledge 
here.
Keep posted, and while I have you, I’ll show you a neat little trick I use 
daily.&lt;/p&gt;

&lt;h2 id=&quot;jless&quot;&gt;jless&lt;/h2&gt;

&lt;p&gt;I use the JSON format almost everywhere, and it provides a simple medium
to transfer data interplatform, and is readable by almost anything. On the CLI,
I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; to view this. To make this even easier, I use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jless&lt;/code&gt; CLI command,
which makes this process much more unix-esque.&lt;/p&gt;

&lt;p&gt;Insert this into your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; and your good to go!&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jless() { jq . $1 -C | less -R; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;iframe src=&quot;https://gfycat.com/ifr/ImpartialTemptingGreatdane&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;714&quot; height=&quot;400&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="json" /><category term="CLI" /><category term="linux" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.merwin.ca/assets/images/markdown.jpg" /><media:content medium="image" url="https://www.merwin.ca/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>