<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-05T21:50:33-04:00</updated><id>http://localhost:4000/</id><title type="html">Nishanth Merwin</title><subtitle>A blog about technology and stuff related</subtitle><entry><title type="html">#SWDChallenge Makeover</title><link href="http://localhost:4000/swd/" rel="alternate" type="text/html" title="#SWDChallenge Makeover" /><published>2018-09-05T11:42:00-04:00</published><updated>2018-09-05T11:42:00-04:00</updated><id>http://localhost:4000/swd</id><content type="html" xml:base="http://localhost:4000/swd/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I recently came across &lt;a href=&quot;http://www.storytellingwithdata.com/&quot;&gt;Storytelling With Data&lt;/a&gt;, and their #SWDChallenge. Sad that I missed their last round, I was quick to jump on this month’s &lt;a href=&quot;http://www.storytellingwithdata.com/blog/2018/8/24/swdchallenge-how-would-you-makeover-this-graph&quot;&gt;challenge&lt;/a&gt;. The challenge this month was to revamp this figure depicting the change in global travel markets from 2000 to 2016.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/makeover_challenge.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing I saw with this chart is the title, and I had absolutely no idea what APAC was. Only after playing with the data for a while, I realized that APAC=Asia Pacific, and that in 2016, this region has the largest share of the travel tourism market. While great to include a clear takeaway in a figure, it was lost in translation. Next, I realized that my eyes were constantly bouncing between the two pie charts, more so comparing the percentage values than the actual size of the pie (pie charts are &lt;a href=&quot;https://blog.funnel.io/why-we-dont-use-pie-charts-and-some-tips-on-better-data-visualizations&quot;&gt;notoriously&lt;/a&gt; &lt;a href=&quot;https://www.richardhollins.com/blog/why-pie-charts-suck/&quot;&gt;difficult&lt;/a&gt; to &lt;a href=&quot;http://www.storytellingwithdata.com/blog/2011/07/death-to-pie-charts&quot;&gt;interpret&lt;/a&gt;) So, moving forward, I knew I had to fix a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use consistent acronyms across the chart.&lt;/li&gt;
  &lt;li&gt;Provide a way for data to be directly compared, without the use of pie charts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With these two goals in mind, I created a new interpretation of this data set:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/makeover_challenge_revamped.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This plot was created with matplotlib, with slight modifications using inkscape (mainly for the legend). One aspect I wanted to highlight in this graph is the difference between 2000 and 2016, which is why I chose to emphasize this with arrows, coloured according to the direction. Only after I plotted this data, I could appreciate that Asia Pacific is not only the largest travel market, but also that all other regions have lost lots of this market share.&lt;/p&gt;

&lt;p&gt;All of the code needed to plot this is hosted on my &lt;a href=&quot;https://github.com/nishanthmerwin/swd_challenge/blob/master/src/plot_data.ipynb&quot;&gt;GitHub&lt;/a&gt;. Feel free to peruse and suggest any improvements!&lt;/p&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="visualization" /><category term="data science" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">Building an object recognition mobile app</title><link href="http://localhost:4000/deltahacks/" rel="alternate" type="text/html" title="Building an object recognition mobile app" /><published>2018-01-29T11:42:00-05:00</published><updated>2018-01-29T11:42:00-05:00</updated><id>http://localhost:4000/deltahacks</id><content type="html" xml:base="http://localhost:4000/deltahacks/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This past weekend, I participated in &lt;a href=&quot;http://deltahacks.com/&quot;&gt;DeltaHacks IV&lt;/a&gt; at McMaster, and got a chance to meet, learn and collaborate with a lot of awesome people. Our team decided to tackle one of the challenges posted, to improve workplace safety. Our idea was to create an object recognition mobile application that employees could use to easily identify the dangers and safety protocols required to operate the equipment around them.&lt;/p&gt;

&lt;p&gt;Together with &lt;a href=&quot;https://github.com/RyanNourbaran&quot;&gt;Ryan&lt;/a&gt; and &lt;a href=&quot;https://github.com/Sujan-Kandeepan&quot;&gt;Sujan&lt;/a&gt;, we built SafetyFirst.&lt;/p&gt;

&lt;iframe src=&quot;https://gfycat.com/ifr/ThinFastDanishswedishfarmdog&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;720&quot; height=&quot;400&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;the-technology&quot;&gt;The technology&lt;/h2&gt;

&lt;p&gt;A lot of this app was made possible through the work done by Google’s research team. In 2017, their team released several &lt;a href=&quot;https://github.com/tensorflow/models/tree/master/research/object_detection&quot;&gt;object recognition models&lt;/a&gt; trained on the &lt;a href=&quot;http://cocodataset.org&quot;&gt;COCO&lt;/a&gt; dataset. While they all work well, we chose to use the “Single Shot Multibox Detector (SSD) with MobileNet” due to its rapid prediction time. After trying a few others, we found that this model could provide reliable results in seconds running on just a CPU.&lt;/p&gt;

&lt;p&gt;To use this model, we built a simple webserver using &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; to expose a single endpoint. This endpoint, when deployed receives images base64 encoded and embedded within a JSON object. At this point, the image is decoded in the backend and sent through the network for classification, and bounding box prediction. Using PIL, the bounding boxes of each prediction are drawn on the image before sending it back to the user, along with prediction data. To deploy this application, we used &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt;. Although I had never used it before, it’s surprisingly simple to expose a Flask application through there.&lt;/p&gt;

&lt;p&gt;The front end of this application was built using &lt;a href=&quot;https://developer.android.com/studio/index.html&quot;&gt;Android Studio&lt;/a&gt;. This was entirely built by Sujan, and he did an amazing job. This app currently allows users to take pictures, send it to the webserver for prediction, and then display the results. For each of our predictions, Ryan setup a MongoDB document collection that was exposed through a RESTful API. MongoDB was another tool that I had just learned about, and was impressed with how easy and quick it was to setup.&lt;/p&gt;

&lt;p&gt;Feel free to poke around or fork our &lt;a href=&quot;https://github.com/nishanthmerwin/deltahacks4_arsafety&quot;&gt;git repo&lt;/a&gt;. Happy hacking!&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;A big thanks to DeltaHacks IV organizing committee, your hard work made all of this possible. Another thank you to AccelorMital Dofasco for awarding us with the Workplace Safety prize. And finally a thanks to all the judges that deemed us worthy as one of the top six finalists.&lt;/p&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="machine learning" /><category term="python" /><category term="tensorflow" /><category term="Android Studio" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry><entry><title type="html">Hello and jless</title><link href="http://localhost:4000/first_post/" rel="alternate" type="text/html" title="Hello and jless" /><published>2017-11-24T11:42:00-05:00</published><updated>2017-11-24T11:42:00-05:00</updated><id>http://localhost:4000/first_post</id><content type="html" xml:base="http://localhost:4000/first_post/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Hi all! Welcome to my blog. As you might already know, 
I’m currently heading towards the end of my graduate career and thought 
about all of the things I’ve learned through my time here. To keep some record 
of it and share a few of my experiences, I’m publishing some tidbits of knowledge 
here.
Keep posted, and while I have you, I’ll show you a neat little trick I use 
daily.&lt;/p&gt;

&lt;h2 id=&quot;jless&quot;&gt;jless&lt;/h2&gt;

&lt;p&gt;I use the JSON format almost everywhere, and it provides a simple medium
to transfer data interplatform, and is readable by almost anything. On the CLI,
I use &lt;code class=&quot;highlighter-rouge&quot;&gt;jq&lt;/code&gt; to view this. To make this even easier, I use the &lt;code class=&quot;highlighter-rouge&quot;&gt;jless&lt;/code&gt; CLI command,
which makes this process much more unix-esque.&lt;/p&gt;

&lt;p&gt;Insert this into your &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; and your good to go!&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jless() { jq . $1 -C | less -R; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;iframe src=&quot;https://gfycat.com/ifr/ImpartialTemptingGreatdane&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;714&quot; height=&quot;400&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>nishanth</name></author><category term="blog" /><category term="json" /><category term="CLI" /><category term="linux" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/markdown.jpg" /></entry></feed>